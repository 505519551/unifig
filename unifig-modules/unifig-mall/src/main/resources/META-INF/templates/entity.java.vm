/**
 * FileName: $!{table.comment}
 * Author:   ${author}
 * Date:     ${date}
 * Description: $!{table.comment}
 * History:
 * <author>          <time>          <version>          <desc>
 */
package ${package.Entity};

#if(${activeRecord})
import java.io.Serializable;
import io.swagger.annotations.ApiModelProperty;

#end
#foreach($pkg in ${table.importPackages})
import ${pkg};
#end

import com.baomidou.mybatisplus.annotations.Version;

import lombok.Data;
import lombok.experimental.Accessors;

/**
 * <p>
 * $!{table.comment}
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Data
@Accessors(chain = true)
#if(${table.convert})
@TableName("${table.name}")
#end
#if(${superEntityClass})
public class ${entity} extends ${superEntityClass}#if(${activeRecord})<${entity}>#end {
#elseif(${activeRecord})
public class ${entity} extends Model<${entity}> {
#else
public class ${entity} implements Serializable {
#end

    private static final long serialVersionUID = 1L;

## ----------  BEGIN 字段循环遍历  ----------
#foreach($field in ${table.fields})
#if(${field.keyFlag})
#set($keyPropertyName=${field.propertyName})
#end
#if("$!field.comment" != "")
    /**
     * ${field.comment}
     */
#end
#if(${field.keyFlag})
## 主键
#if(${field.keyIdentityFlag})
	@TableId(value="${field.name}", type= IdType.AUTO)
#elseif(${field.convert})
	@TableId(value="${field.name}", type= IdType.UUID)
#end
## 普通字段
#elseif(${field.fill})
## -----   存在字段填充设置   -----
#if(${field.convert})
	@TableField(value = "${field.name}", fill = FieldFill.${field.fill})
#else
	@TableField(fill = FieldFill.${field.fill})
#end
#elseif(${field.convert})
	@TableField("${field.name}")
#end
## 乐观锁注解
#if(${versionFieldName}==${field.name})
	@Version
#end
## 逻辑删除注解
#if(${logicDeleteFieldName}==${field.name})
    @TableLogic
#end
	@ApiModelProperty(value = "${field.comment}", name = "${field.propertyName}")
	private ${field.propertyType} ${field.propertyName};
#end
## ----------  END 字段循环遍历  ----------

#if(${entityColumnConstant})
#foreach($field in ${table.fields})
	public static final String ${field.name.toUpperCase()} = "${field.name}";

#end
#end
#if(${activeRecord})
	@Override
	protected Serializable pkVal() {
#if(${keyPropertyName})
		return this.${keyPropertyName};
#else
		return this.id;
#end
	}

#end
}
