#==============================================================  
#Configure Main Scheduler Properties  正式库
#==============================================================
#使用StdSchedulerFactory的 getScheduler()方法创建的scheduler实例名称，在同一个程序中可以根据该名称来区分scheduler。如果实在集群环境中使用，你必须使用同一个名称——集群环境下"逻辑"相同的scheduler。
org.quartz.scheduler.instanceName = EtlScheduler
#scheduler实例的标志id，必须是全局唯一的，即使在集群环境中"逻辑"相同的scheduler。 或者可以使用"SYS_PROP"通过系统属性设置id。
org.quartz.scheduler.instanceId = AUTO
#建议设置为"org.terracotta.quartz.skipUpdateCheck=true"不会在程序运行中还去检查quartz是否有版本更新。
org.quartz.scheduler.skipUpdateCheck=true
#是否打开Quartz的JMX支持
org.quartz.scheduler.jmx.export=true
#是否打开Quartz的RMI支持
org.quartz.scheduler.rmi.export=false
#是否打开Quartz的RMI支持
org.quartz.scheduler.rmi.proxy=false
#是否在用户指定的事务中运行任务
org.quartz.scheduler.wrapJobExecutionInUserTransaction=false 

#==============================================================  
#Configure JobStore  
#==============================================================
#指定Quartz的数据（job及trigger信息）存储位置，RamJobStore指内存; org.quartz.simpl.RAMJobStore、org.quartz.impl.jdbcjobstore.JobStoreCMT、org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.class = org.quartz.impl.jdbcjobstore.JobStoreTX
#类似于Hibernate的dialect，用于处理DB之间的差异，StdJDBCDelegate能满足大部分的DB，使用的数据库驱动，具体的驱动列表详情如下
org.quartz.jobStore.driverDelegateClass = org.quartz.impl.jdbcjobstore.StdJDBCDelegate
#Job任务存储表的前缀
org.quartz.jobStore.tablePrefix = QRTZ_
#是否使用集群
org.quartz.jobStore.isClustered = true
#检查集群下的其他调度器实体的事件间隔
org.quartz.jobStore.clusterCheckinInterval = 20000
#这个值必须存于一个datasource的配置信息(必須org.quartz.dataSource格式开头)
org.quartz.jobStore.dataSource = qrtzDataSource
#最大能忍受的触发超时时间，如果超过则认为"失误"
org.quartz.jobStore.misfireThreshold = 120000
#JobDataMaps是否都为String类型;设置为true不会出现序列化非字符串类到 BLOB 时产生的类版本问题(数据为Map类型)
org.quartz.jobStore.useProperties=false
#JobStore 能处理的错过触发的 Trigger 的最大数量。处理太多(超过两个) 很快会导致数据库表被锁定够长的时间，这样就妨碍了触发别的(还未错过触发) trigger 执行的性能。
org.quartz.jobStore.maxMisfiresToHandleAtATime=1
#值为 true 时告知 Quartz(当使用 JobStoreTX 或 CMT) 调用 JDBC 连接的 setTransactionIsolation(Connection.TRANSACTION_SERIALIZABLE) 方法。这有助于阻止某些数据库在高负载和长时间事物时锁的超时。
org.quartz.jobStore.txIsolationLevelSerializable=false
#这必须是一个从 LOCKS 表查询一行并对这行记录加锁的 SQL 语句。假如未设置，默认值就是 SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE，这能在大部分数据库上工作。{0} 会在运行期间被前面你配置的 TABLE_PREFIX 所替换。
org.quartz.jobStore.selectWithLockSQL=SELECT * FROM {0}LOCKS WHERE LOCK_NAME = ? FOR UPDATE


#==============================================================  
#Configure DataSource  
#============================================================== 
org.quartz.dataSource.qrtzDataSource.driver = com.mysql.jdbc.Driver
org.quartz.dataSource.qrtzDataSource.URL = jdbc:mysql://192.144.201.111:13306/etl_quartz?useUnicode=true&characterEncoding=utf8&serverTimezone=UTC&useSSL=false
org.quartz.dataSource.qrtzDataSource.user = root
org.quartz.dataSource.qrtzDataSource.password = cmF0ZWw=
org.quartz.dataSource.qrtzDataSource.maxConnections = 5
org.quartz.dataSource.qrtzDataSource.validationQuery=select 0 from dual

#==============================================================  
#Configure ThreadPool  
#==============================================================
#线程池的名字。可以使用后Quartz 的 "org.quartz.simpl.SimpleThreadPool"
org.quartz.threadPool.class = org.quartz.simpl.SimpleThreadPool
#指定线程数量。一般1-100足以满足你的应用需求了
org.quartz.threadPool.threadCount = 5
#线程优先级，Thread.MIN_PRIORITY (1) and Thread.MAX_PRIORITY (10)之间，默认Thread.NORM_PRIORITY (5)
org.quartz.threadPool.threadPriority = 5
#自创建父线程
org.quartz.threadPool.threadsInheritContextClassLoaderOfInitializingThread = true

#==============================================================  
#Configure plugin  
#==============================================================
#org.quartz.plugin.triggHistory.class=org.quartz.plugins.history.LoggingJobHistoryPlugin
org.quartz.plugin.shutdownhook.class=org.quartz.plugins.management.ShutdownHookPlugin
org.quartz.plugin.shutdownhook.cleanShutdown=true


#============================================================================
# Configure triggerListener 监听器的配置（全局触发器的监听器配置+ 全局job的监听器配置）
#============================================================================
#全局触发器的监听器配置
#org.quartz.triggerListener.NAME.class = com.quartz.task.job.MyJobListener
#org.quartz.triggerListener.NAME.propName = propValue
#org.quartz.triggerListener.NAME.prop2Name = prop2Value

#全局job的监听器配置
#org.quartz.jobListener.NAME.class = com.quartz.task.job.MyJobListener
#org.quartz.jobListener.NAME.propName = propValue
#org.quartz.jobListener.NAME.prop2Name = prop2Value



#org.quartz.jobStore.driverDelegateClass数据库驱动列表：
#org.quartz.impl.jdbcstore.StdJDBCDelegate 适用于完全兼容JDBC的驱动
#org.quartz.impl.jdbcstore.MSSQLDelegate 适用于Miscrosoft SQL Server和Sybase数据库
#org.quartz.impl.jdbcjobstore.PostgreSQLDelegate
#org.quartz.impl.jdbcjobstore.WebLogicDelegate
#org.quartz.impl.jdbcjobstore.oracle.OracleDelegate
#org.quartz.impl.jdbcjobstore.oracle.WebLogicOracleDelegate
#org.quartz.impl.jdbcjobstore.oracle.weblogic.WebLogicOracleDelegate
#org.quartz.impl.jdbcjobstore.CloudscapeDelegate
#org.quartz.impl.jdbcjobstore.DB2v6Delegate
#org.quartz.impl.jdbcjobstore.DB2v7Delegate
#org.quartz.impl.jdbcjobstore.DB2v8Delegate
#org.quartz.impl.jdbcjobstore.HSQLDBDelegate
#org.quartz.impl.jdbcjobstore.PointbaseDelegate
#org.quartz.impl.jdbcjobstore.SybaseDelegate

#从一个应用服务中获取数据源配置
#org.quartz.dataSource.myOtherDS.jndiURL=jdbc/myDataSource
#org.quartz.dataSource.myOtherDS.java.naming.factory.initial=com.evermind.server.rmi.RMIInitialContextFactory
#org.quartz.dataSource.myOtherDS.java.naming.provider.url=ormi://localhost
#org.quartz.dataSource.myOtherDS.java.naming.security.principal=admin
#org.quartz.dataSource.myOtherDS.java.naming.security.credentials=123
